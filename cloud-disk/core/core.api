service core-api {
	// user login function
	@handler UserLogin
	post /user/login (LoginRequest) returns (LoginReply)
	
	// get user's detailed information
	@handler UserDetail
	get /user/detail (UserDetailRequest) returns (UserDetailReply)
	
	// send validation code
	@handler MailCodeSendRegister
	post /mail/code/send/register (MailCodeSendRequest) returns (MailCodeSendReply)
	
	// user register function
	@handler UserRegister
	post /user/register (UserRegisterRequest) returns (UserRegisterReply)
	
	// get resource detailed information
	@handler ShareBasicDetail
	get /share/basic/detail(ShareBasicDetailRequest) returns (ShareBasicDetailReply)
}

// when a request enters the router, it will firstly get into middleware,
// then enter handler, and logic lastly
// so we can realize some function in middleware before parsing the
// request, like checking authorization
@server(
	middleware: Auth
)
service core-api {
	// file upload function
	@handler FileUpload
	post /file/upload (FileUploadRequest) returns (FileUploadReply)
	
	// user-repository associated saving function
	@handler UserRepositorySave
	post /user/repository/save (UserRepositorySaveRequest) returns (UserRepositorySaveReply)
	
	// user file list function
	@handler UserFileList
	get /user/file/list (UserFileListRequest) returns (UserFileListReply)
	
	// modify user's filename
	@handler UserFileNameUpdate
	post /user/file/name/update(UserFileNameUpdateRequest) returns(UserFileNameUpdateReply)
	
	// create user's folder
	@handler UserFolderCreate
	post /user/folder/create(UserFolderCreateRequest) returns(UserFolderCreateReply)
	
	// delete user's file: soft delete
	@handler UserFileDelete
	post /user/file/delete (UserFileDeleteRequest) returns (UserFileDeleteReply)
	
	// move user's file to other folder
	@handler UserFileMove
	put /user/file/move (UserFileMoveRequest) returns (UserFileMoveReply)
	
	// create share record
	@handler ShareBasicCreate
	post /share/basic/create (ShareBasicCreateRequest) returns (ShareBasicCreateReply)
	
	@handler ShareBasicSave
	post /share/basic/save (ShareBasicSaveRequest) returns (ShareBasicSaveReply)
	
	// refresh authorization
	@handler RefreshAuthorization
	post /refresh/authorization(RefreshAuthorizationRequest) returns(RefreshAuthorizationReply)
	
}

type RefreshAuthorizationRequest {
}

type RefreshAuthorizationReply {
	Token        string `json:"token"`
	RefreshToken string `json:"refresh_token"`
}

type ShareBasicSaveRequest {
	UserRepositoryIdentity string `json:"user_repository_identity"`
	ParentId               int64  `json:"parent_id"`
}

type ShareBasicSaveReply {
	Identity string `json:"identity"`
}

type ShareBasicDetailRequest {
	Identity string `json:"identity"`
}

type ShareBasicDetailReply {
	RepositoryIdentity string `json:"repository_identity"`
	Name               string `json:"name"`
	Ext                string `json:"ext"`
	Size               int64  `json:"size"`
	Path               string `json:"path"`
}

type ShareBasicCreateRequest {
	UserRepositoryIdentity string `json:"user_repository_identity"`
	ExpiredTime            int    `json:"expired_time"`
}

type ShareBasicCreateReply {
	Identity string `json:"identity"`
}

type UserFileMoveRequest {
	Identity       string `json:"identity"`
	ParentIdentity string `json:"parent_identity"`
}

type UserFileMoveReply {
}

type UserFileDeleteRequest {
	Identity string `json:"identity"`
}

type UserFileDeleteReply {
}

type UserFolderCreateRequest {
	Name     string `json:"name"`
	ParentId int64  `json:"parent_id"`
}

type UserFolderCreateReply {
	Identity string `json:"identity"`
}

type UserFileNameUpdateRequest {
	Identity string `json:"identity"`
	Name     string `json:"name"`
}

type UserFileNameUpdateReply {
}

type UserFileListRequest {
	Id   int64 `json:"id,optional"`
	Page int   `json:"page,optional"`
	// the amount of each page
	Size int `json:"size,optional"`
}

type UserFileListReply {
	List  []*UserFile `json:"list"`
	Count int64       `json:"count"`
}

type UserFile {
	Id                 int64  `json:"id"`
	Identity           string `json:"identity"`
	RepositoryIdentity string `json:"repository_identity"`
	Name               string `json:"name"`
	Ext                string `json:"ext"`
	Path               string `json:"path"`
	Size               int64  `json:"size"`
}

type UserRepositorySaveRequest {
	ParentId            int64  `json:"parent_id"`
	Repository_Identity string `json:"repository_identity"`
	Ext                 string `json:"ext"`
	Name                string `json:"name"`
}

type UserRepositorySaveReply {
}

type FileUploadRequest {
	Hash string `json:"hash, optional"`
	Name string `json:"name, optional"`
	Ext  string `json:"ext, optional"`
	Size int64  `json:"size, optional"`
	Path string `json:"path, optional"`
}

type FileUploadReply {
	Identity string `json:"identity"`
	Ext      string `json:"ext"`
	Name     string `json:"name"`
}

type UserRegisterRequest {
	Name     string `json:"name"`
	Password string `json:"password"`
	Email    string `json:"email"`
	Code     string `json:"code"`
}

type UserRegisterReply {
}

type LoginRequest {
	Name     string `json:"name"`
	Password string `json:"password"`
}

type LoginReply {
	Token        string `json:"token"`
	RefreshToken string `json:"refresh_token"`
}

type UserDetailRequest {
	Identity string `json:"identity"`
}

type UserDetailReply {
	Name  string `json:"name"`
	Email string `json:"email"`
}

type MailCodeSendRequest {
	Email string `json:"email"`
}

type MailCodeSendReply {
	Code string `json:"code"`
}